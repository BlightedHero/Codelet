const Student = require('../components/Student.js');
const express = require('express');
const router = express.Router();
const fs = require('fs');
const { v4: uuid } = require('uuid');
const students_file = 'data/students.json';

/*
GET/students/{student_id}
Retrieves account information for specified student through ID
*/
router.get('/:student_id', (req, res) => {
	const student_id = req.params.student_id;
	try {
		const students = JSON.parse(fs.readFileSync(students_file));
		const student = students["students"].find((student) => student.id == student_id);
		if (student == undefined) {
			res.status(400).json("Invalid Student ID");
		} else {
			res.send({"username":student.username, "password":student.password});
		}
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
GET/students/id/{username}
Retrieves student ID for specified student through username
*/
router.get('/id/:username', (req, res) => {
	const username = req.params.username;
	try {
		const students = JSON.parse(fs.readFileSync(students_file));
		const student_id = students["students"].find((student) => student.username == username).id;
		res.json(student_id);
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
GET/students/{student_id}/question/{question_number}
Retrieves the specified question information for specified student
*/
router.get('/:student_id/question/:question_number', (req, res) => {
	const student_id = req.params.student_id;
	const question_number = req.params.question_number;
	try {
		const student = new Student(student_id);
		student.load();
		const score = student.getScore(question_number);
		const prompts = student.getPrompts(question_number);
		const responses = student.getResponses(question_number);
		res.send({"score": score, "prompts": prompts, "responses": responses});
	} catch (error) {
		res.status(500).json(error);
	}
});


/*
GET/students/{student_id}/question/{question_number}/score
Retrieves the score for the specified question by the specified student
*/
router.get('/:student_id/question/:question_number/score', (req, res) => {
	const student_id = req.params.student_id;
	const question_number = req.params.question_number;
	try {
		const student = new Student(student_id);
		student.load();
		const score = student.getScore(question_number);
		res.json(score);
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
GET/students/{student_id}/question/{question_number}/prompts
Retrieves all prompts for the specified question by the specified student
*/
router.get('/:student_id/question/:question_number/prompts', (req, res) => {
	const student_id = req.params.student_id;
	const question_number = req.params.question_number;
	try {
		const student = new Student(student_id);
		student.load();
		const prompts = student.getPrompts(question_number);
		res.json(prompts);
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
GET/students/{student_id}/question/{question_number}/responses
Retrieves all responses generated by the LLM for the specified student and question
*/
router.get('/:student_id/question/:question_number/responses', (req, res) => {
	const student_id = req.params.student_id;
	const question_number = req.params.question_number;
	try {
		const student = new Student(student_id);
		student.load();
		const responses = student.getResponses(question_number);
		res.json(responses);
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
GET/students/{student_id}/researchers
Retrieves all researcher IDs a student has added to their account
*/
router.get('/:student_id/researchers', (req, res) => {
	const student_id = req.params.student_id;
	try {
		const student = new Student(student_id);
		student.load();
		const researchers = student.researchers;
		res.json(researchers);
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
POST/students/account
Create a new student account
*/
router.post('/account', (req, res) => {
	const username = req.body.username;
	const password = req.body.password;
	try {
		const students = JSON.parse(fs.readFileSync(students_file));
		const idx = students["students"].findIndex((student) => student.username == username);
		if (idx != -1) {
			res.status(400).json("Username Taken");
		} else {
			const student_id = uuid();
			students["students"].push({"username": username, "id": student_id, "password": password});
			fs.writeFileSync(students_file, JSON.stringify(students));
			student = new Student(student_id);
			student.save();
			res.json(student_id);
		}
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
POST/students/{student_id}/researcher
Adds a new researcher to the list of researchers under the specified student
*/
router.post('/:student_id/researcher', (req, res) => {
	const student_id = req.params.student_id;
	const researcher_id = req.body.researcher_id;
	try {
		const student = new Student(student_id);
		student.load();
		student.addResearcher(researcher_id);
		student.save();
		res.json(student.researchers);
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
POST/students/{student_id}/question/{question_number}/prompt
Add the student's new prompt for the specified question
*/
router.post('/:student_id/question/:question_number/prompt', (req, res) => {
	const student_id = req.params.student_id;
	const question_number = req.params.question_number;
	const prompt = req.body.prompt;
	try {
		const student = new Student(student_id);
		student.load();
		student.addPrompt(question_number, prompt);
		student.save();
		res.json(student.getPrompts(question_number));
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
POST/students/{student_id}/question/{question_number}/response
Add the student's new response for the specified question
*/
router.post('/:student_id/question/:question_number/response', (req, res) => {
	const student_id = req.params.student_id;
	const question_number = req.params.question_number;
	const response = req.body.response;
	try {
		const student = new Student(student_id);

		student.load();
		student.addResponse(question_number, response);
		student.save();
		res.json(student.getResponses(question_number));
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
POST/students/login
Login with credentials to get the token
*/
router.post('/login', (req, res) => {
	const username = req.body.username;
	const password = req.body.password;
	try {
		const students = JSON.parse(fs.readFileSync(students_file));
		const idx = students["students"].findIndex((student) => student.username == username);
		if (idx != -1) {
			if (students["students"][idx].password == password) {
				res.json("fourmantoken");
			} else {
				res.status(401).json("Incorrect Password");
			}
		} else {
			res.status(400).json("No Account Found");
		}
	} catch (error) {
			res.status(500).json(error);
	}
});

/*
PUT/students/{student_id}/password
Update the student's account password
*/
router.put('/:student_id/password', (req, res) => {
	const student_id = req.params.student_id;
	const newpassword = req.body.newpassword;
	const oldpassword = req.body.oldpassword;
	try {
		const students = JSON.parse(fs.readFileSync(students_file));
		const idx = students["students"].findIndex((student) => student.id == student_id);
		if (students["students"][idx].password == oldpassword) {
			students["students"][idx].password = newpassword;
			fs.writeFileSync(students_file, JSON.stringify(students));
			res.json(newpassword);
		} else {
			res.status(401).json("Incorrect Password");
		}
	} catch (error) {
		res.status(500).json(error);
	}
});

/*
DELETE/students/{student_id}
Remove the student's account
*/
router.delete('/:student_id', (req, res) => {
	const student_id = req.params.student_id;
	try {
		const students = JSON.parse(fs.readFileSync(students_file));
		const idx = students["students"].findIndex((student) => student.id == student_id);
		if (idx != -1) {
			students["students"].splice(idx, 1);
			fs.writeFileSync(students_file, JSON.stringify(students));
			fs.unlinkSync('public/student_accounts/'+student_id+'.json');
			res.json(student_id)
		} else {
			res.status(400).json("No Account Found");
		}
	} catch (error) {
		res.status(500).json(error);
	}
});


module.exports = router;
